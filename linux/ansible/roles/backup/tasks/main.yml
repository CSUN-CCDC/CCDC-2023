---
- name: Check if backup directories exists already
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/backups"
  register: backups_dir_created
  # ignore_errors: true # Do I need this option?

- name: Archive and fetch directories
  when: backup_directories | length > 0
  block:
    - name: Check if backup_version is set
      ansible.builtin.assert:
        that: backup_version
        fail_msg: "Please set the backup_version variable for this role"
    - name: Ensure trailing slash is used
      ansible.builtin.assert:
        that: "{{ item[-1] == '/' }}"
        fail_msg: "Please use trailing slashes. E.G: /etc/systemd/"
      loop: "{{ backup_directories }}"
    # - name: Locate symlinks
    #   become: true
    #   ansible.builtin.find:
    #     file_type: link
    #     recurse: true
    #     paths: "{{ item }}"
    #   loop: "{{ backup_directories }}"
    #   register: found_symlinks
    # Gitignore part can probably be merged into a single task
    # Also a when statement, for when it's not needed.
    - name: Create .gitignore file
      become: true
      ansible.builtin.template:
        src: templates/gitignore.j2
        dest: /tmp/gitignore
        mode: '0644'
    - name: Fetch gitignore
      ansible.builtin.fetch:
        src: /tmp/gitignore
        dest: "{{ playbook_dir }}/backups/.gitignore"
        flat: true
    - name: Delete gitignore
      become: true
      ansible.builtin.file:
        path: /tmp/gitignore
        state: absent

    - name: Create archive of declared directories
      become: true
      when: backup_directories
      community.general.archive:
        path: "{{ item }}"
        dest: "/{{ item | replace('/', '_d_') }}.tar.gz"
        mode: '0644'
      loop: "{{ backup_directories }}"
    - name: Fetch backed up directories
      become: true # This shouldn't need become, but just in case
      ansible.builtin.fetch:
        # The below results in ansible fetching //directory.tar.gz. This works, but maybe it's not consistent?
        src: "/{{ item | replace('/', '_d_') }}.tar.gz"
        dest: "{{ playbook_dir }}/backups/{{ inventory_hostname }}/{{ backup_version }}/"
        flat: true
      loop: "{{ backup_directories }}"
    - name: Delete backup on system
      become: true
      ansible.builtin.file:
        state: absent
        path: "/{{ item | replace('/', '_d_') }}.tar.gz"
      loop: "{{ backup_directories }}"

- name: Restore backed up directories
  when: backup_restore | length > 0
  become: true
  block:
    - name: Check if backup_version is set
      ansible.builtin.assert:
        that: backup_version
        fail_msg: "Please set the backup_version variable for this role"
    - name: Ensure trailing slash is used
      ansible.builtin.assert:
        that: "{{ item[-1] == '/' }}"
        fail_msg: "Please use trailing slashes. E.G: /etc/systemd/"
      loop: "{{ backup_restore }}"
    - name: Copy tar.gz to the server
      become: true
      ansible.builtin.copy:
        remote_src: false # Searches for file on the controller node
        src: "{{ playbook_dir }}/backups/{{ inventory_hostname }}/{{ backup_version }}/{{ item | replace('/', '_d_') }}.tar.gz"
        dest: "/{{ item | replace('/', '_d_') }}.tar.gz"
        mode: '0644'
      loop: "{{ backup_restore }}"
    - name: Ensure directory is present
      become: true
      ansible.builtin.file:
        name: "{{ item }}"
        state: directory
        # No mode here, because the defaults are alright, but we don't want it to change the existing mode if it is different.
      loop: "{{ backup_restore }}"
    - name: Extract item to spot
      become: true
      ansible.builtin.unarchive:
        # False makes it copy from local node. I don't know how ansible unarchives, so with this it writes to disk rather than using ram.
        remote_src: true
        src: "/{{ item | replace('/', '_d_') }}.tar.gz"
        dest: "{{ item | replace('_d_', '/') }}"
      loop: "{{ backup_restore }}"
    - name: Delete backup on system
      become: true
      ansible.builtin.file:
        state: absent
        path: "/{{ item | replace('/', '_d_') }}.tar.gz"
      loop: "{{ backup_restore }}"
