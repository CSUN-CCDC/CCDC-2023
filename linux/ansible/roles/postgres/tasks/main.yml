---

- name: Download gitignore
  when: postgres_shuffle_passwords is true
  #become: true
  block:
    - name: Create .gitignore file
      ansible.builtin.template:
        src: templates/gitignore.j2
        dest: /tmp/gitignore
        mode: '0644'
    - name: Fetch gitignore
      ansible.builtin.fetch:
        src: /tmp/gitignore
        dest: "{{ playbook_dir }}/postgres/.gitignore"
        flat: true
    - name: Delete gitignore
      ansible.builtin.file:
        path: /tmp/.gitignore
        state: absent

- name: Shuffle postgres passwords
  become: "{{ postgres_host == postgres_localhost }}"
  when: postgres_shuffle_passwords is true
  block:
    - name: Get list of users in the database
      community.postgresql.postgresql_info:
        login_host: "{{ postgres_host }}"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_port: "{{ postgres_port }}"
      register: db_info
    - name: Debug, print postgres user list
      ansible.builtin.debug:
        # Users are just roles with the "login" attribute, similar to how unix human users get shells.
        # So it doesn't matter if we change the password of every
        msg: "{{ db_info.roles }}"

    - name: Print dictionary items
      ansible.builtin.debug:
        msg: "{{ db_info.roles | dict2items }}"
    - name: Create random location for passwords csv
      ansible.builtin.set_fact:
        postgrespasswords: "{{ lookup('community.general.random_string', length=12, special=false) }}"
    - name: Create scoring engine CSV
      ansible.builtin.file:
        dest: "/tmp/{{ postgrespasswords }}"
        mode: '0644'
        state: touch
    - name: Shuffle passwords
      ansible.builtin.include_tasks:
        file: tasks/shuffle_passwords.yml
      loop: "{{ db_info.roles | dict2items }}"
      when: "{{ item.key != postgres_user }}"
    - name: Generate password for {{ postgres_user }}
      ansible.builtin.set_fact:
        postgres_new_password: "{{ lookup('community.general.random_string', length=12, special=false) }}"
      when: not postgres_new_password
    - name: Collect user info
      community.postgresql.postgresql_info:
        login_host: "{{ postgres_host }}"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_port: "{{ postgres_port }}"
      register: db_info
    - name: Debug, print postgres user list
      ansible.builtin.debug:
        # Users are just roles with the "login" attribute, similar to how unix human users get shells.
        # So it doesn't matter if we change the password of every
        msg: "{{ db_info.roles }}"
    - name: Edit csv with password of {{ postgres_user }}
      ansible.builtin.lineinfile:
        path: "/tmp/{{ postgrespasswords }}"
        line: "{{ postgres_user }},{{ postgres_new_password }}"
    - name: Download password csv
      ansible.builtin.fetch:
        src: "/tmp/{{ postgrespasswords }}"
        dest: "{{ playbook_dir }}/postgres/{{ inventory_hostname if postgres_host == postgres_localhost else postgres_host }}.csv"
        flat: true
    - name: Delete password csv
      ansible.builtin.file:
        path: "/tmp/{{ postgrespasswords }}"
        state: absent
    - name: Change postgres password for {{ postgres_user }}
      community.postgresql.postgresql_user:
        login_host: "{{ postgres_host }}"
        login_user: "{{ postgres_user }}"
        login_password: "{{ postgres_password }}"
        login_port: "{{ postgres_port }}"
        user: "{{ postgres_user }}"
        password: "{{ postgres_new_password }}"
